services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: youtube_downloader
      POSTGRES_USER: ytdl_user
      POSTGRES_PASSWORD: ytdl_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ytdl_user -d youtube_downloader"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://ytdl_user:ytdl_password@postgres:5432/youtube_downloader
      REDIS_URL: redis://redis:6379
      DOWNLOAD_DIR: /app/downloads
      MAX_FILE_AGE_HOURS: 48
      RATE_LIMIT_PER_MINUTE: 10
      ENVIRONMENT: production
    volumes:
      - downloads_data:/app/downloads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend (for production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # URL Display Service
  url-display:
    image: alpine:latest
    command: >
      sh -c "
      echo '';
      echo 'ðŸš€ ====================================== ðŸš€';
      echo '    YouTube Downloader is Ready!';
      echo 'ðŸš€ ====================================== ðŸš€';
      echo '';
      echo 'ðŸ“± Frontend (Web UI):';
      echo '   âžœ http://localhost:3000';
      echo '';
      echo 'ðŸ”§ Backend API:';
      echo '   âžœ http://localhost:8000';
      echo '   âžœ API Docs: http://localhost:8000/docs';
      echo '';
      echo 'ðŸ’¾ Database & Cache:';
      echo '   âžœ PostgreSQL: localhost:5433';
      echo '   âžœ Redis: localhost:6379';
      echo '';
      echo 'ðŸŽ‰ Ready to download YouTube content!';
      echo '';
      echo 'ðŸ›‘ To stop all services:';
      echo '   âžœ docker compose down';
      echo 'ðŸš€ ====================================== ðŸš€';
      echo '';
      sleep 5
      "
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  downloads_data:

networks:
  default:
    driver: bridge
